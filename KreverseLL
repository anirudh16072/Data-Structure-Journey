from sys import stdin

#Following is the Node class already written for the Linked List
class Node :
    def __init__(self, data) :
        self.data = data
        self.next = None
def getkth(curr,k):
    while curr and k>0:
        curr = curr.next
        k-=1
    return curr



def kReverse(head, k) :
	#Your code goes here
    if k == 0:
        return head
    dummy = Node(0)
    dummy.next = head
    groupPrev = dummy
    while True:
        kth = getkth(groupPrev,k)
        if not kth:
            break
        groupNext = kth.next
        prev,curr = kth.next,groupPrev.next
        while curr != groupNext:
            temp = curr.next
            curr.next = prev
            prev = curr
            curr = temp
        temp = groupPrev.next
        groupPrev.next = kth
        groupPrev = temp
    return dummy.next
        





























#Taking Input Using Fast I/O
def takeInput() :
    head = None
    tail = None

    datas = list(map(int, stdin.readline().rstrip().split(" ")))

    i = 0
    while (i < len(datas)) and (datas[i] != -1) :
        data = datas[i]
        newNode = Node(data)

        if head is None :
            head = newNode
            tail = newNode

        else :
            tail.next = newNode
            tail = newNode

        i += 1

    return head




def printLinkedList(head) :

    while head is not None :
        print(head.data, end = " ")
        head = head.next

    print()


#main
t = int(stdin.readline().rstrip())

while t > 0 :
    
    head = takeInput()
    k = int(stdin.readline().strip())

    newHead = kReverse(head, k)
    printLinkedList(newHead)

    t -= 1
